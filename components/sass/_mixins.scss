@mixin mediaQuery($args...) {
    @if length($args) > 1 {
        @media screen and (min-width: nth($args, 1)) and (max-width: nth($args, 2)){
            @content;
        }
    } @else {
        @media screen and (min-width: nth($args, 1)){
            @content;
        }
    }
}

@mixin flexOnly() {
            display: -webkit-flex !important;
             display: -webkit-box !important;
             display: -ms-flexbox !important;
                display: -moz-box !important;
                    display: flex !important;
}

// Set a Flex container w/ wrap and direction.
@mixin flexContainer($dir, $wrap) {
                 display: -webkit-flex;
                  display: -webkit-box;
                  display: -ms-flexbox;
                     display: -moz-box;
                         display: flex;
                         
    @if $wrap == 'wrap' {
           -webkit-box-lines: multiple;
              -moz-box-lines: multiple;
    } @else {
             -webkit-box-lines: single;
                -moz-box-lines: single;
    }
              -webkit-flex-wrap: $wrap;
                  -ms-flex-wrap: $wrap;
                      flex-wrap: $wrap;
    @if $dir == 'row' {
       -webkit-box-orient: inline-axis;
         -webkit-box-direction: normal;
          -moz-box-orient: inline-axis;
            -moz-box-direction: normal;
    } @else {
        -webkit-box-orient: block-axis;
        -webkit-box-direction: reverse;
           -moz-box-orient: block-axis;
           -moz-box-direction: reverse;
    }
          -webkit-flex-direction: $dir;
              -ms-flex-direction: $dir;
                  flex-direction: $dir;
}

// Optional: Set Flex container main and cross alignments
@mixin flexAxis($main, $cross) {
    @if $cross == 'flex-end' {
        -webkit-box-align: end;
           -moz-box-align: end;
           -ms-flex-align: end;
    } @else if $cross == 'flex-start' {
        -webkit-box-align: start;
           -moz-box-align: start;
           -ms-flex-align: start;
    } @else if $cross == 'space-between' {
        -webkit-box-align: justify;
           -moz-box-align: justify;
           -ms-flex-align: justify;
    } @else {
        -webkit-box-align: $cross;
           -moz-box-align: $cross;
           -ms-flex-align: $cross;
    }
      -webkit-align-items: $cross;
              align-items: $cross;

    @if $main == 'flex-end' {
        -webkit-box-pack: end;
           -moz-box-pack: end;
           -ms-flex-pack: end;
    } @else if $main == 'flex-start' {
        -webkit-box-pack: start;
           -moz-box-pack: start;
           -ms-flex-pack: start;
    } @else {
        -webkit-box-pack: $main;
           -moz-box-pack: $main;
           -ms-flex-pack: $main;
    }
        -webkit-justify-content: $main;
                justify-content: $main;
                  -ms-flex-pack: $main;
}

// Optional: Set Flex container cross-line behavior
@mixin flexAlignContent($cross){
    @if $cross == 'space-around' {
        -ms-flex-line-pcak: distribute;
    } @else if $cross == 'space-between' {
        -ms-flex-line-pcak: justify;
    } @else if $cross == 'flex-end' {
        -ms-flex-line-pcak: end;
    } @else if $cross == 'flex-start' {
        -ms-flex-line-pcak: start;
    } @else {
        -ms-flex-line-pcak: $cross;
    }
         -webkit-align-content: $cross;
                 align-content: $cross;
}

// Set Flex item w/ flex properties (grow, shrink and basis)
@mixin flexItem($grow, $shrink, $basis) {
-webkit-box-flex: $grow $shrink $basis;
   -moz-box-flex: $grow $shrink $basis;
    -webkit-flex: $grow $shrink $basis;
        -ms-flex: $grow $shrink $basis;
            flex: $grow $shrink $basis;
}

// Optional: Set Flex item order
@mixin flexOrder($order){
  -webkit-box-ordinal-group: $order;
     -moz-box-ordinal-group: $order;
             -ms-flex-order: $order;
              -webkit-order: $order;
                      order: $order;
}

// Optional: Set individual flex item cross alignment
@mixin flexSelf($cross){
    -ms-flex-align-self: $cross;
     -webkit-align-self: $cross;
             align-self: $cross;
}

@mixin boxShadow($horizontal, $vertical, $blur, $spread, $color) {
    -webkit-box-shadow: $horizontal $vertical $blur $spread $color;
       -moz-box-shadow: $horizontal $vertical $blur $spread $color;
            box-shadow: $horizontal $vertical $blur $spread $color;
}

@mixin borderRadius($pixels) {
    -webkit-border-radius: $pixels;
       -moz-border-radius: $pixels;
            border-radius: $pixels;
}

@mixin linearGradient($direction, $color) {
    background: -webkit-linear-gradient($direction, lighten($color, 10%) 0%, darken($color, 10%) 100%);
       background: -moz-linear-gradient($direction, lighten($color, 10%) 0%, darken($color, 10%) 100%);
        background: -ms-linear-gradient($direction, lighten($color, 10%) 0%, darken($color, 10%) 100%);
         background: -o-linear-gradient($direction, lighten($color, 10%) 0%, darken($color, 10%) 100%);
           background: -webkit-gradient(linear, $direction, color-stop(0%, lighten($color, 10%)), color-stop(100%, darken($color, 10%)));
            background: linear-gradient($direction, lighten($color, 10%) 0%, darken($color, 10%) 100%);
}

@mixin radialGradient($color, $pos, $size) {
    background:
        -moz-radial-gradient($color $pos, transparent $pos),
        -moz-radial-gradient($color $pos * 2, transparent $pos * 2),
        darken($color, 10%);
    background:
        -webkit-radial-gradient($color $pos, transparent $pos),
        -webkit-radial-gradient($color $pos * 2, transparent $pos * 2),
        darken($color, 10%);
    background:
        radial-gradient($color $pos, transparent $pos),
        radial-gradient($color $pos * 2, transparent $pos * 2),
        darken($color, 10%);
    background-size: $size/2 $size/2;
}

@mixin checkeredGradient($color, $size) {
    background-image: gradient(linear, 0 100%, 100% 0, color-stop(0.25, $color), color-stop(0.25, transparent)),
                      gradient(linear, 0 0, 100% 100%, color-stop(0.25, $color), color-stop(0.25, transparent)),
                      gradient(linear, 0 100%, 100% 0, color-stop(0.75, transparent), color-stop(0.75, $color)),
                      gradient(linear, 0 0, 100% 100%, color-stop(0.75, transparent), color-stop(0.75, $color));
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, $color), color-stop(0.25, transparent)),
                    -webkit-gradient(linear, 0 0, 100% 100%, color-stop(0.25, $color), color-stop(0.25, transparent)),
                    -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.75, transparent), color-stop(0.75, $color)),
                    -webkit-gradient(linear, 0 0, 100% 100%, color-stop(0.75, darken($color, 10%)), color-stop(0.75, $color));

  -webkit-background-size: $size $size;
     -moz-background-size: $size $size;
          background-size: $size $size;

  background-position: 0 0, $size/2 0, $size/2 ($size/2)*-1, 0px $size/2;
}

@mixin stripedGradient($direction, $color, $size) {
    background: repeating-linear-gradient($direction, $color, $color $size / 2, darken($color, 10%) $size / 2, darken($color, 10%) $size * 2);
    background: -o-repeating-linear-gradient($direction, $color, $color $size / 2, darken($color, 10%) $size / 2, darken($color, 10%) $size * 2);
    background: -moz-repeating-linear-gradient($direction, $color, $color $size / 2, darken($color, 10%) $size / 2, darken($color, 10%) $size * 2);
    background: -webkit-repeating-linear-gradient($direction, $color, $color $size / 2, darken($color, 10%) $size / 2, darken($color, 10%) $size * 2);
}

@mixin setAnimation($name, $duration) {
    -webkit-animation-name: $name;
       -moz-animation-name: $name;
         -o-animation-name: $name;
            animation-name: $name;
-webkit-animation-duration: $duration;
   -moz-animation-duration: $duration;
     -o-animation-duration: $duration;
        animation-duration: $duration;
}
